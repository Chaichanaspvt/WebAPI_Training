/*****************************************************************************
 * File generated by HDevelop Version 21.05
 *
 * Do not modify!
 *****************************************************************************/

using System;
using System.IO;
using HalconDotNet;


/*
 * If you use this class in your program, you have to 
 * link against hdevenginedotnet.dll and halcondotnet.dll.
 * The Dlls are located in ${HALCONROOT}/bin/dotnet[20|35].
 *
 * The wrapped .hdev or .hdpl files have to be located in the folder
 * that is specified in the static ResourcePath property of 
 * dl_classification_workflow. 
 * By default, ResourcePath is ${binary_dir}/res_dl_classification_workflow.
 *
 * It is recommended to compile an assembly from this file using
 * the generated CMakeLists.txt.
 */

namespace dl_classification_workflow
{
  public static class dl_classification_workflow
  {

    public static void check_data_availability(
        HTuple ExampleDataDir,
        HTuple DLDatasetFileName,
        HTuple TrainedModelFileName,
        HTuple UsePretrainedModel)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _check_data_availability.Value.CreateCall())
      {
        SetParameter(call,"ExampleDataDir",ExampleDataDir);
        SetParameter(call,"DLDatasetFileName",DLDatasetFileName);
        SetParameter(call,"TrainedModelFileName",TrainedModelFileName);
        SetParameter(call,"UsePretrainedModel",UsePretrainedModel);
        call.Execute();
      }
    }

    public static void dev_close_example_image_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_close_example_image_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_close_example_legend_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_close_example_legend_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_close_example_windows(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_close_example_windows.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_example_reset_windows(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_example_reset_windows.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_confusion_matrix(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_confusion_matrix.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_device(
        HTuple ExampleInternals,
        HTuple DLDevice)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_device.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        SetParameter(call,"DLDevice",DLDevice);
        call.Execute();
      }
    }

    public static void dev_display_screen_evaluation_measures(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_evaluation_measures.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_final(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_final.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_introduction(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_introduction.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_precision_recall_f1score(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_precision_recall_f1score.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_run_program(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_run_program.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_topK(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_topK.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_visual_inspection_intro(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_visual_inspection_intro.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_example_init(
        HTuple ShowExampleScreens,
        HTuple UsePretrainedModel,
        out HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_example_init.Value.CreateCall())
      {
        SetParameter(call,"ShowExampleScreens",ShowExampleScreens);
        SetParameter(call,"UsePretrainedModel",UsePretrainedModel);
        call.Execute();
        ExampleInternals = GetParameterHTuple(call,"ExampleInternals");
      }
    }

    public static void dev_open_example_image_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_open_example_image_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_open_example_legend_window(
        HTuple ExampleInternals,
        HTuple WindowWidth)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_open_example_legend_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        SetParameter(call,"WindowWidth",WindowWidth);
        call.Execute();
      }
    }

    public static void dev_open_example_text_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_open_example_text_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }


    /****************************************************************************
    * ResourcePath
    *****************************************************************************
    * Use ResourcePath in your application to specify the location of the 
    * HDevelop script or procedure library.
    *****************************************************************************/
    public static string ResourcePath
    {
      get
      {
        return _resource_path;
      }
      set
      {
        lock(_procedure_path_lock)
        {
          _procedure_path_initialized = false;
        }
        _resource_path = value;
      }
    }

#region Implementation details

    /* Implementation details of the wrapper class.
     * You do not have to use these functions ever.
     */

    private static bool _procedure_path_initialized = false;
    private static object _procedure_path_lock = new object();

    private static string _resource_path = "./res_dl_classification_workflow";

    private static Lazy<HDevProgram> _Program
            = new Lazy<HDevProgram>(() => new HDevProgram(Path.Combine(dl_classification_workflow.ResourcePath, "classify_pill_defects_deep_learning_3_evaluate.hdev")));
    private static Lazy<HDevProcedure> _check_data_availability
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "check_data_availability"));
    private static Lazy<HDevProcedure> _dev_close_example_image_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_close_example_image_window"));
    private static Lazy<HDevProcedure> _dev_close_example_legend_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_close_example_legend_window"));
    private static Lazy<HDevProcedure> _dev_close_example_windows
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_close_example_windows"));
    private static Lazy<HDevProcedure> _dev_display_example_reset_windows
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_example_reset_windows"));
    private static Lazy<HDevProcedure> _dev_display_screen_confusion_matrix
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_confusion_matrix"));
    private static Lazy<HDevProcedure> _dev_display_screen_device
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_device"));
    private static Lazy<HDevProcedure> _dev_display_screen_evaluation_measures
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_evaluation_measures"));
    private static Lazy<HDevProcedure> _dev_display_screen_final
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_final"));
    private static Lazy<HDevProcedure> _dev_display_screen_introduction
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_introduction"));
    private static Lazy<HDevProcedure> _dev_display_screen_precision_recall_f1score
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_precision_recall_f1score"));
    private static Lazy<HDevProcedure> _dev_display_screen_run_program
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_run_program"));
    private static Lazy<HDevProcedure> _dev_display_screen_topK
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_topK"));
    private static Lazy<HDevProcedure> _dev_display_screen_visual_inspection_intro
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_visual_inspection_intro"));
    private static Lazy<HDevProcedure> _dev_example_init
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_example_init"));
    private static Lazy<HDevProcedure> _dev_open_example_image_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_open_example_image_window"));
    private static Lazy<HDevProcedure> _dev_open_example_legend_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_open_example_legend_window"));
    private static Lazy<HDevProcedure> _dev_open_example_text_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_open_example_text_window"));
        
    private static HTuple GetParameterHTuple(HDevProcedureCall call, string name)
    {
      return call.GetOutputCtrlParamTuple(name);
    }

    private static HObject GetParameterHObject(HDevProcedureCall call, string name)
    {
      return call.GetOutputIconicParamObject(name);
    }

    private static HTupleVector GetParameterHTupleVector(HDevProcedureCall call, string name)
    {
      return call.GetOutputCtrlParamVector(name);
    }

    private static HObjectVector GetParameterHObjectVector(HDevProcedureCall call, string name)
    {
      return call.GetOutputIconicParamVector(name);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HTuple tuple)
    {
      call.SetInputCtrlParamTuple(name,tuple);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HObject obj)
    {
      call.SetInputIconicParamObject(name,obj);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HTupleVector vector)
    {
      call.SetInputCtrlParamVector(name,vector);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HObjectVector vector)
    {
      call.SetInputIconicParamVector(name,vector);
    }

    private static void AddResourcePathToProcedurePath() 
    {
      lock(_procedure_path_lock)
      {
        if(!_procedure_path_initialized)
        {
          new HDevEngine().AddProcedurePath(ResourcePath);
          _procedure_path_initialized = true;
        }
      }
    }

#endregion

}
}