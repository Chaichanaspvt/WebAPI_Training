<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="21.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>* </c>
<c>* This example is part of a series of examples, which summarizes</c>
<c>* the workflow for DL classification. It uses the MVTec pill dataset.</c>
<c>* The four parts are:</c>
<c>* 1. Dataset preprocessing</c>
<c>* 2. Training of the model.</c>
<c>* 3. Evaluation of the trained model.</c>
<c>* 4. Inference on new images.</c>
<c>* </c>
<c>* This examples contains part 3: 'Evaluation of the trained model'.</c>
<c>* </c>
<c>* Please note: This example requires the output of part 1:</c>
<c>* classify_pill_defects_deep_learning_1_preprocess.hdev.</c>
<c>* If you set UsePretrainedModel := false, the output of part 2,</c>
<c>* classify_pill_defects_deep_learning_2_train.hdev,</c>
<c>* is also required.</c>
<c>* </c>
<l>dev_update_off ()</l>
<c>* </c>
<c>* In this example, the evaluation is explained in graphics windows,</c>
<c>* before they are executed. Set the following parameter to false in order to</c>
<c>* skip this visualization.</c>
<l>ShowExampleScreens := true</l>
<c>* </c>
<c>* By default, this example uses a model pretrained by MVTec. To use the model</c>
<c>* which was trained in part 2 of this example series, set the following</c>
<c>* variable to false.</c>
<l>UsePretrainedModel := true</l>
<c>* </c>
<c>* The evaluation can be performed on GPU or CPU.</c>
<c>* See the respective system requirements in the Installation Guide.</c>
<c>* If possible a GPU is used in this example.</c>
<c>* In case you explicitely wish to run this example on the CPU,</c>
<c>* choose the CPU device instead.</c>
<l>query_available_dl_devices (['runtime','runtime'], ['gpu','cpu'], DLDeviceHandles)</l>
<l>if (|DLDeviceHandles| == 0)</l>
<l>    throw ('No supported device found to continue this example.')</l>
<l>endif</l>
<c>* Due to the filter used in query_available_dl_devices, the first device is a GPU, if available.</c>
<l>DLDevice := DLDeviceHandles[0]</l>
<c>* </c>
<l>if (ShowExampleScreens)</l>
<c>    * Initial example windows and parameters etc.</c>
<l>    dev_example_init (ShowExampleScreens, UsePretrainedModel, ExampleInternals)</l>
<c>    * </c>
<c>    * Example series introduction text.</c>
<l>    dev_display_screen_introduction (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * Evaluation measures.</c>
<l>    dev_display_screen_evaluation_measures (ExampleInternals)</l>
<l>    stop ()</l>
<l>    dev_display_screen_topK (ExampleInternals)</l>
<l>    stop ()</l>
<l>    dev_display_screen_confusion_matrix (ExampleInternals)</l>
<l>    stop ()</l>
<l>    dev_display_screen_precision_recall_f1score (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * Visual inspection.</c>
<l>    dev_display_screen_visual_inspection_intro (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * Model optimization.</c>
<l>    dev_display_screen_model_optimization_info (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * Mention on which device the deep learning operators will run.</c>
<l>    dev_display_screen_device (ExampleInternals, DLDevice)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * Start the program.</c>
<l>    dev_display_screen_run_program (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * </c>
<c>    * Terminate example screens.</c>
<l>    dev_display_example_reset_windows (ExampleInternals)</l>
<l>endif</l>
<c>* </c>
<c>* </c>
<c>* ******************************************************</c>
<c>* **   Set paths and parameters for the evaluation   ***</c>
<c>* ******************************************************</c>
<c>* </c>
<c>* Paths.</c>
<c>* </c>
<c>* Project directory for any outputs written by HALCON.</c>
<l>ExampleDataDir := 'classify_pill_defects_data'</l>
<c>* File path of the preprocessed DLDataset.</c>
<c>* Note: Adapt DataDirectory after preprocessing with another image size.</c>
<l>DataDirectory := ExampleDataDir + '/dldataset_pill_300x300'</l>
<l>DLDatasetFileName := DataDirectory + '/dl_dataset.hdict'</l>
<c>* </c>
<l>if (UsePretrainedModel)</l>
<c>    * Use the pretrained model shipping with HALCON.</c>
<l>    RetrainedModelFileName := 'classify_pill_defects.hdl'</l>
<l>else</l>
<c>    * Path of the retrained classification model.</c>
<l>    RetrainedModelFileName := ExampleDataDir + '/best_dl_model_classification.hdl'</l>
<l>endif</l>
<c>* </c>
<c>* Evaluation parameters.</c>
<c>* </c>
<c>* Evaluation measures.</c>
<l>ClassificationMeasures := ['top1_error','precision','recall','f_score','absolute_confusion_matrix','relative_confusion_matrix']</l>
<c>* Batch size used during evaluation.</c>
<l>BatchSize := 10</l>
<c>* </c>
<c>* **********************************</c>
<c>* **   Evaluation of the model   ***</c>
<c>* **********************************</c>
<c>* </c>
<c>* Check if all necessary files exist.</c>
<l>check_data_availability (ExampleDataDir, DLDatasetFileName, RetrainedModelFileName, UsePretrainedModel)</l>
<c>* </c>
<c>* Read the retrained model.</c>
<l>read_dl_model (RetrainedModelFileName, DLModelHandle)</l>
<c>* </c>
<l>set_dl_model_param (DLModelHandle, 'batch_size', BatchSize)</l>
<c>* </c>
<l>set_dl_model_param (DLModelHandle, 'device', DLDevice)</l>
<c>* </c>
<c>* Read the preprocessed DLDataset file.</c>
<l>read_dict (DLDatasetFileName, [], [], DLDataset)</l>
<c>* </c>
<c>* Set parameters for evaluation.</c>
<l>create_dict (GenParamEval)</l>
<l>set_dict_tuple (GenParamEval, 'measures', ClassificationMeasures)</l>
<l>set_dict_tuple (GenParamEval, 'show_progress', 'true')</l>
<c>* </c>
<c>* Evaluate the retrained model.</c>
<l>evaluate_dl_model (DLDataset, DLModelHandle, 'split', 'test', GenParamEval, EvaluationResult, EvalParams)</l>
<c>* </c>
<c>* </c>
<c>* ******************************</c>
<c>* **   Display the results   ***</c>
<c>* ******************************</c>
<c>* </c>
<c>* Display measures.</c>
<l>create_dict (WindowHandleDict)</l>
<l>create_dict (GenParamEvalDisplay)</l>
<l>set_dict_tuple (GenParamEvalDisplay, 'display_mode', ['measures','pie_charts_precision','pie_charts_recall','absolute_confusion_matrix'])</l>
<l>dev_display_classification_evaluation (EvaluationResult, EvalParams, GenParamEvalDisplay, WindowHandleDict)</l>
<l>dev_disp_text ('Press F5 to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<c>* </c>
<l>stop ()</l>
<l>dev_close_window_dict (WindowHandleDict)</l>
<c>* </c>
<c>* Call interactive confusion matrix.</c>
<l>dev_display_dl_interactive_confusion_matrix (DLDataset, EvaluationResult, [])</l>
<c>* </c>
<c>* Close window handles.</c>
<l>dev_close_window_dict (WindowHandleDict)</l>
<c>* </c>
<c>* </c>
<c>* **************************************</c>
<c>* **   Visual inspection of images   ***</c>
<c>* **************************************</c>
<c>* </c>
<c>* To inspect some examples more precisely,</c>
<c>* calculate and display a heatmap.</c>
<c>* Here, we choose the samples</c>
<c>* labeled and classified as 'contamination'.</c>
<c>* </c>
<l>SelectedHeatmapGTClassName := 'contamination'</l>
<l>SelectedHeatmapInfClassName := 'contamination'</l>
<c>* </c>
<c>* Get information from DLDataset and EvaluationResult.</c>
<l>get_dict_tuple (EvaluationResult, 'evaluated_samples', EvaluatedSamples)</l>
<l>get_dict_tuple (EvaluatedSamples, 'image_ids', ImageIDs)</l>
<l>get_dict_tuple (EvaluatedSamples, 'image_label_ids', ImageLabelIDs)</l>
<l>get_dict_tuple (EvaluatedSamples, 'top1_predictions', Predictions)</l>
<l>get_dict_tuple (DLDataset, 'class_names', ClassNames)</l>
<l>get_dict_tuple (DLDataset, 'class_ids', ClassIDs)</l>
<c>* Get class IDs for selected classes.</c>
<l>PredictedClassID := ClassIDs[find(ClassNames,SelectedHeatmapInfClassName)]</l>
<l>GroundTruthClassID := ClassIDs[find(ClassNames,SelectedHeatmapGTClassName)]</l>
<c>* Get tuple position of selected classes.</c>
<l>GTIndices := find(ImageLabelIDs [==] GroundTruthClassID,1)</l>
<l>PredictionIndices := find(Predictions [==] PredictedClassID,1)</l>
<c>* Get image IDs for selected combination.</c>
<l>ImageIDsSelected := []</l>
<l>if (PredictionIndices != -1 and PredictionIndices != [])</l>
<l>    ImageIDsSelected := ImageIDs[intersection(GTIndices,PredictionIndices)]</l>
<l>endif</l>
<c>* </c>
<c>* We offer two heatmap options:</c>
<c>* 1) a fast heatmap operator supporting the method 'grad_cam'</c>
<c>* 2) a confidence-based approach implemented as procedure.</c>
<c>* In this example, set HeatmapMethod to 'heatmap_grad_cam'</c>
<c>* or 'heatmap_confidence_based' to switch between the heatmap options.</c>
<l>HeatmapMethod := 'heatmap_grad_cam'</l>
<c>* </c>
<c>* Set the target class ID or [] to show the heatmap</c>
<c>* for the classified class.</c>
<l>TargetClassID := []</l>
<l>create_dict (HeatmapParam)</l>
<l>if (HeatmapMethod == 'heatmap_grad_cam')</l>
<c>    * Set generic parameters for operator heatmap.</c>
<l>    set_dict_tuple (HeatmapParam, 'use_conv_only', 'false')</l>
<l>    set_dict_tuple (HeatmapParam, 'scaling', 'scale_after_relu')</l>
<l>elseif (HeatmapMethod == 'heatmap_confidence_based')</l>
<c>    * Set target class ID.</c>
<l>    set_dict_tuple (HeatmapParam, 'target_class_id', TargetClassID)</l>
<c>    * Set the feature size and the sampling size for the</c>
<c>    * confidence based approach.</c>
<l>    FeatureSize := 30</l>
<l>    SamplingSize := 10</l>
<l>    set_dict_tuple (HeatmapParam, 'feature_size', FeatureSize)</l>
<l>    set_dict_tuple (HeatmapParam, 'sampling_size', SamplingSize)</l>
<l>else</l>
<l>    throw ('Unsupported heatmap method.')</l>
<l>endif</l>
<c>* </c>
<c>* Heatmaps are displayed in sequence, hence set batch size to 1.</c>
<l>set_dl_model_param (DLModelHandle, 'batch_size', 1)</l>
<c>* </c>
<c>* Visualize heatmaps for selected samples.</c>
<l>create_dict (WindowHandleDict)</l>
<l>get_dict_tuple (DLDataset, 'samples', DatasetSamples)</l>
<l>for Index := 0 to min([|ImageIDsSelected| - 1,10]) by 1</l>
<c>    * Select the corresponding DLSample.</c>
<l>    find_dl_samples (DatasetSamples, 'image_id', ImageIDsSelected[Index], 'match', DLSampleIndex)</l>
<l>    read_dl_samples (DLDataset, DLSampleIndex, DLSample)</l>
<c>    * </c>
<l>    if (HeatmapMethod == 'heatmap_grad_cam')</l>
<l>        gen_dl_model_heatmap (DLModelHandle, DLSample, 'grad_cam', TargetClassID, HeatmapParam, DLResult)</l>
<l>    else</l>
<c>        * Create temporary DLResult for display.</c>
<l>        create_dict (DLResult)</l>
<l>        gen_dl_model_classification_heatmap (DLModelHandle, DLSample, DLResult, HeatmapParam)</l>
<l>    endif</l>
<l>    dev_display_dl_data (DLSample, DLResult, DLDataset, HeatmapMethod, [], WindowHandleDict)</l>
<l>    dev_disp_text ('Press F5 to continue.', 'window', 'bottom', 'right', 'black', [], [])</l>
<l>    stop ()</l>
<l>endfor</l>
<c>* </c>
<c>* Optimize the memory consumption.</c>
<l>set_dl_model_param (DLModelHandle, 'optimize_for_inference', 'true')</l>
<l>write_dl_model (DLModelHandle, RetrainedModelFileName)</l>
<c>* Close the windows.</c>
<l>dev_close_window_dict (WindowHandleDict)</l>
<c>* </c>
<l>if (ShowExampleScreens)</l>
<c>    * Display final screen.</c>
<l>    dev_display_screen_final (ExampleInternals)</l>
<l>    stop ()</l>
<c>    * Close example windows.</c>
<l>    dev_close_example_windows (ExampleInternals)</l>
<l>endif</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="dev_example_init">
<interface>
<ic>
<par name="ShowExampleScreens" base_type="ctrl" dimension="0"/>
<par name="UsePretrainedModel" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* This procedure initializes the graphic windows that are used for explanations during the example.</c>
<c></c>
<c>* A dictionary that will be used/adapted by other example procedures.</c>
<l>create_dict (ExampleInternals)</l>
<l>set_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>set_dict_tuple (ExampleInternals, 'use_pretrained_model', UsePretrainedModel)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<l>dev_close_window ()</l>
<l>WindowWidthText := 800</l>
<l>WindowHeightText := 300</l>
<l>WindowBGColor := 'gray'</l>
<l>dev_open_window (0, 0, WindowWidthText, WindowHeightText, WindowBGColor, WindowHandleText)</l>
<l>set_display_font (WindowHandleText, 16, 'mono', 'true', 'false')</l>
<l>set_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>set_dict_tuple (ExampleInternals, 'window_text_width', WindowWidthText)</l>
<l>set_dict_tuple (ExampleInternals, 'window_text_height', WindowHeightText)</l>
<c></c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_example_init">
<parameters>
<parameter id="ExampleInternals"/>
<parameter id="ShowExampleScreens">
<default_type>integer</default_type>
<default_value>0</default_value>
<description lang="en_US">A boolean that is used to enable/disable explanation screens in this example</description>
<multivalue>false</multivalue>
<sem_type>string</sem_type>
<type_list>
<item>integer</item>
</type_list>
<value_max>1</value_max>
<value_min>0</value_min>
</parameter>
<parameter id="UsePretrainedModel"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_precision_recall_f1score">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure explains the entities precision, recall and F1-score..</c>
<c>* </c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c>* </c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c>* </c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c>* </c>
<c>* Display introductional text.</c>
<l>Text := 'Evaluation measures: Precision, Recall, and F1-score'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'The precision is the proportion of'</l>
<l>Text[|Text|] := 'all correctly predicted positives (TP) to'</l>
<l>Text[|Text|] := 'all predicted positives (TP and FP).'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'The recall, also called the "true positive rate", is the proportion of'</l>
<l>Text[|Text|] := 'all correctly predicted positives (TP) to'</l>
<l>Text[|Text|] := 'all real positives (TP and FN).'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'To represent precision and recall with a single number, we compute'</l>
<l>Text[|Text|] := 'the harmonic mean (F1-score) of precision and recall.'</l>
<c>* </c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_precision_recall_f1score">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_final">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure shows the final screen for the example.</c>
<c>* </c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c>* </c>
<l>dev_open_example_text_window (ExampleInternals)</l>
<c>* </c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c>* </c>
<c>* Display introductional text.</c>
<l>Text := 'In this example we have seen:'</l>
<l>Text[|Text|] := ' - which evaluation measures can be computed for a classification model'</l>
<l>Text[|Text|] := ' - how the model is evaluated by means of measures and visual inspection'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'If the performance of the model satisfies the requirements,'</l>
<l>Text[|Text|] := 'it can now be applied to new images.'</l>
<l>Text[|Text|] := 'How this is done, is explained in the next example'</l>
<l>Text[|Text|] := '\'classify_pill_defects_deep_learning_4_infer.hdev\'.'</l>
<c>* </c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Please open the next example.', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c>* </c>
<l>set_dict_tuple (ExampleInternals, 'window_handles_to_close', WindowHandleText)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_final">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_example_reset_windows">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure resets the graphics windows.</c>
<c></c>
<c>* Close any windows that are listed in key 'window_handles_to_close'.</c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_handles_to_close', WindowHandlesToClose)</l>
<l>catch (Exception)</l>
<l>    WindowHandlesToClose := []</l>
<l>endtry</l>
<l>for I := 0 to |WindowHandlesToClose| - 1 by 1</l>
<l>    dev_set_window (WindowHandlesToClose[I])</l>
<l>    dev_close_window ()</l>
<l>endfor</l>
<l>set_dict_tuple (ExampleInternals, 'window_handles_to_close', [])</l>
<c></c>
<c>* Open image window if needed</c>
<l>get_dict_param (ExampleInternals, 'keys', [], WindowHandleKeys)</l>
<l>tuple_find (WindowHandleKeys, 'window_images', Index)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_needed', WindowImagesNeeded)</l>
<l>if (WindowImagesNeeded and Index == -1)</l>
<c>    * Open new window for images</c>
<l>    dev_open_example_image_window (ExampleInternals)</l>
<l>elseif (not WindowImagesNeeded and Index != -1)</l>
<c>    * Window for images exists but is not needed -&gt; close it</c>
<l>    dev_close_example_image_window (ExampleInternals)</l>
<l>endif</l>
<c></c>
<c>* Open legend window if needed</c>
<l>get_dict_param (ExampleInternals, 'keys', [], WindowHandleKeys)</l>
<l>tuple_find (WindowHandleKeys, 'window_legend', Index)</l>
<l>get_dict_tuple (ExampleInternals, 'window_legend_needed', WindowLegendNeeded)</l>
<l>if (WindowLegendNeeded and Index == -1)</l>
<c>    * Open new window for legend</c>
<l>    dev_open_example_legend_window (ExampleInternals, 280)</l>
<l>elseif (not WindowLegendNeeded and Index != -1)</l>
<c>    * Window for legend exists but is not needed -&gt; close it</c>
<l>    dev_close_example_legend_window (ExampleInternals)</l>
<l>endif</l>
<c></c>
<c>* Set the correct area (part) of the image window.</c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_images', WindowHandleImages)</l>
<l>    dev_set_window (WindowHandleImages)</l>
<l>    dev_clear_window ()</l>
<c>    * Set default window extends</c>
<l>    dev_set_window_extents (360, 0, 800, 500)</l>
<l>    dev_set_part (1, 1, -1, -1)</l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<c>* Set the correct area (part) of the legend window.</c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_legend', WindowHandleLegend)</l>
<l>    dev_set_window (WindowHandleLegend)</l>
<l>    dev_clear_window ()</l>
<l>    dev_set_part (1, 1, -1, -1)</l>
<l>catch (Exception)</l>
<l>endtry</l>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<l>dev_clear_window ()</l>
<l>return ()</l>
</body>
<docu id="dev_display_example_reset_windows">
<parameters>
<parameter id="ExampleInternals">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<sem_type>dict</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_confusion_matrix">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure explains the pixel accuracy.</c>
<c>* </c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c>* </c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c>* </c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c>* </c>
<c>* Display introductional text.</c>
<l>Text := 'Evaluation measures: Confusion matrix'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'Knowing the ground truth class, we can compare the class affiliations:'</l>
<l>Text[|Text|] := 'the predicted one and the correct one.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'A confusion matrix is a table with such comparisons.'</l>
<l>Text[|Text|] := 'This table makes it easy to see how well the network performs for each'</l>
<l>Text[|Text|] := 'class. For every class it lists how many instances have been predicted'</l>
<l>Text[|Text|] := 'into which class.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'In HALCON, we represent for each class the instances'</l>
<l>Text[|Text|] := 'with this ground truth label in a column and'</l>
<l>Text[|Text|] := 'the instances predicted to belong to this class in a row. '</l>
<c>* </c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_confusion_matrix">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_evaluation_measures">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure shows an overview of evaluation measures.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* * Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<c>* Display introductional text.</c>
<l>Text := 'The evaluation of a classification model is performed by '</l>
<l>Text[|Text|] := 'the procedure \'evaluate_dl_model\'.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'In classification the whole image is assigned to a class.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'In the following, the measures and possible visualizations are introduced.'</l>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<c></c>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_evaluation_measures">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_open_example_image_window">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure initializes the graphic windows that are used to display example images.</c>
<c></c>
<l>WindowHeightText := 300</l>
<l>WindowWidthImage := 500</l>
<l>WindowHeightImages := 500</l>
<l>WindowBGColor := 'gray'</l>
<c></c>
<l>WindowYImages := WindowHeightText + 60</l>
<l>WindowXImages := 0</l>
<l>dev_open_window (WindowYImages, WindowXImages, WindowWidthImage, WindowHeightImages, WindowBGColor, WindowHandleImages)</l>
<l>set_display_font (WindowHandleImages, 16, 'mono', 'true', 'false')</l>
<l>set_dict_tuple (ExampleInternals, 'window_images', WindowHandleImages)</l>
<l>set_dict_tuple (ExampleInternals, 'window_images_width', WindowWidthImage)</l>
<l>set_dict_tuple (ExampleInternals, 'window_images_height', WindowHeightImages)</l>
<l>set_dict_tuple (ExampleInternals, 'window_images_x', WindowXImages)</l>
<l>set_dict_tuple (ExampleInternals, 'window_images_y', WindowYImages)</l>
<l>return ()</l>
</body>
<docu id="dev_open_example_image_window">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_topK">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure explains the Mean IoU.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<c>* Display introductional text.</c>
<l>Text := 'Evaluation measures: top-k error'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'For a given image, the classifier infers class confidences of'</l>
<l>Text[|Text|] := 'how likely the image belongs to every distinguished class.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'The top-k error tells the ratio of predictions where the ground truth class'</l>
<l>Text[|Text|] := 'is not within the k predicted classes with the highest confidences.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'E.g., in the case of top-1 error, we check if the target label matches'</l>
<l>Text[|Text|] := 'the prediction with the highest probability.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<c></c>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c></c>
<l>return ()</l>
<c></c>
</body>
<docu id="dev_display_screen_topK">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_close_example_legend_window">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure closes the legend window.</c>
<c></c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_legend', WindowHandleLegend)</l>
<l>    dev_set_window (WindowHandleLegend)</l>
<l>    dev_close_window ()</l>
<c>    * Delete key.</c>
<l>    remove_dict_key (ExampleInternals, 'window_legend')</l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_close_example_legend_window">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_open_example_legend_window">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
<par name="WindowWidth" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure initializes the graphic windows that are used to display a legend.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_images_height', WindowImagesHeight)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_width', WindowImagesWidth)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_x', WindowImagesX)</l>
<l>get_dict_tuple (ExampleInternals, 'window_images_y', WindowImagesY)</l>
<l>dev_open_window (WindowImagesY, WindowImagesX + WindowImagesWidth + 5, WindowWidth, WindowImagesHeight, 'black', WindowHandleLegend)</l>
<l>set_display_font (WindowHandleLegend, 14, 'mono', 'true', 'false')</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend', WindowHandleLegend)</l>
<l>return ()</l>
</body>
<docu id="dev_open_example_legend_window">
<parameters>
<parameter id="ExampleInternals"/>
<parameter id="WindowWidth"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_introduction">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure shows an overview on all example parts.</c>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<c>* Display introductional text.</c>
<l>Text := 'This example is part of a series of examples, which summarize '</l>
<l>Text[|Text|] := 'the workflow for DL classification.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'The four parts are: '</l>
<l>Text[|Text|] := '1. Dataset preprocessing.'</l>
<l>Text[|Text|] := '2. Training of the model.'</l>
<l>Text[|Text|] := '3. Evaluation of the trained model.'</l>
<l>Text[|Text|] := '4. Inference on new images.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'This example covers part 3: \'Evaluation of the trained model\'.'</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_introduction">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_run_program">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure informs about the code that will be executed.</c>
<c>* </c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c>* </c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c>* </c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c>* </c>
<c>* Display introductional text.</c>
<l>get_dict_tuple (ExampleInternals, 'use_pretrained_model', UsePretrainedModel)</l>
<l>if (UsePretrainedModel)</l>
<l>    Text := 'We will now evaluate the pretrained model shipped with HALCON.'</l>
<l>else</l>
<l>    Text := 'We will now evaluate the retrained model from example part 2'</l>
<l>    Text[|Text|] := '\'classify_pills_deep_learning_2_train.hdev\'.'</l>
<l>endif</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'First, we calculate the evaluation measure on the \'test\'-split.'</l>
<l>Text[|Text|] := 'We display the resulting measures and a confusion matrix.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'Then, we display an interactive confusion matrix.'</l>
<l>Text[|Text|] := 'Clicking on an entry, the corresponding images are shown.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'Finally, a heatmap is shown for a set of images. Here, '</l>
<l>Text[|Text|] := 'we will do this for images labeled and classified as \'contamination\'.'</l>
<c>* </c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c>* </c>
<l>set_dict_tuple (ExampleInternals, 'window_handles_to_close', WindowHandleText)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_run_program">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="check_data_availability">
<interface>
<ic>
<par name="ExampleDataDir" base_type="ctrl" dimension="0"/>
<par name="DLDatasetFileName" base_type="ctrl" dimension="0"/>
<par name="TrainedModelFileName" base_type="ctrl" dimension="0"/>
<par name="UsePretrainedModel" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure checks the availability of all files required to run the</c>
<c>* evaluation example.</c>
<c>* </c>
<l>file_exists (ExampleDataDir, FileExists)</l>
<l>if (not FileExists)</l>
<l>    throw (ExampleDataDir + ' does not exist. Please run part 1 of example series.')</l>
<l>endif</l>
<c>* </c>
<l>file_exists (DLDatasetFileName, FileExists)</l>
<l>if (not FileExists)</l>
<l>    throw (DLDatasetFileName + ' does not exist. Please run part 1 of example series.')</l>
<l>endif</l>
<c>* </c>
<l>file_exists (TrainedModelFileName, FileExists)</l>
<l>if (not FileExists)</l>
<l>    if (UsePretrainedModel)</l>
<l>        throw (TrainedModelFileName + ' does not exist. Please run the HALCON Deep Learning installer.')</l>
<l>    else</l>
<l>        throw (TrainedModelFileName + ' does not exist. Please run part 2 of example series.')</l>
<l>    endif</l>
<l>endif</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="check_data_availability">
<parameters>
<parameter id="DLDatasetFileName"/>
<parameter id="ExampleDataDir"/>
<parameter id="TrainedModelFileName"/>
<parameter id="UsePretrainedModel"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_close_example_image_window">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure closes the image window.</c>
<c></c>
<l>try</l>
<l>    get_dict_tuple (ExampleInternals, 'window_images', WindowHandleImages)</l>
<l>    dev_set_window (WindowHandleImages)</l>
<l>    dev_close_window ()</l>
<c>    * Delete key.</c>
<l>    remove_dict_key (ExampleInternals, 'window_images')</l>
<l>catch (Exception)</l>
<l>endtry</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_close_example_image_window">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_close_example_windows">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure closes all example windows.</c>
<c>* </c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c>* </c>
<l>get_dict_param (ExampleInternals, 'keys', [], Keys)</l>
<l>for Index := 0 to |Keys| by 1</l>
<l>    try</l>
<l>        get_dict_tuple (ExampleInternals, Keys[Index], WindowHandle)</l>
<l>        dev_set_window (WindowHandle)</l>
<l>        dev_close_window ()</l>
<l>    catch (Exception)</l>
<l>    endtry</l>
<l>endfor</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="dev_close_example_windows">
<parameters>
<parameter id="ExampleInternals">
<default_type>integer</default_type>
<mixed_type>false</mixed_type>
<sem_type>dict</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="dev_open_example_text_window">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>WindowWidthText := 800</l>
<l>WindowHeightText := 300</l>
<l>WindowBGColor := 'gray'</l>
<l>dev_open_window (0, 0, WindowWidthText, WindowHeightText, WindowBGColor, WindowHandleText)</l>
<l>set_display_font (WindowHandleText, 16, 'mono', 'true', 'false')</l>
<l>set_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>set_dict_tuple (ExampleInternals, 'window_text_width', WindowWidthText)</l>
<l>set_dict_tuple (ExampleInternals, 'window_text_height', WindowHeightText)</l>
<l>return ()</l>
</body>
<docu id="dev_open_example_text_window">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_visual_inspection_intro">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure explains the visual inspection tools.</c>
<c>* </c>
<l>get_dict_tuple (ExampleInternals, 'show_example_screens', ShowExampleScreens)</l>
<l>if (not ShowExampleScreens)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c>* </c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c>* </c>
<c>* Display text.</c>
<l>Text := 'Visual inspection:'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'Use the procedure \'dev_display_dl_interactive_confusion_matrix\''</l>
<l>Text[|Text|] := 'to show a confusion matrix and interactively display the images'</l>
<l>Text[|Text|] := 'by clicking on the matrix entries.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'For a quick generation of a heatmap of an image to analyze its'</l>
<l>Text[|Text|] := 'classification result use the operator \'gen_dl_model_heatmap\'.'</l>
<l>Text[|Text|] := 'The procedure \'gen_dl_model_classification_heatmap\' can be'</l>
<l>Text[|Text|] := 'used as an alternative.'</l>
<c>* </c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_visual_inspection_intro">
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_model_optimization_info" access="local">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure mentions that we</c>
<c>* optimize the model for memory consumption</c>
<c>* at the end of this example.</c>
<c>* </c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c>* </c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c>* </c>
<c>* Display text.</c>
<l>Text := 'Model optimization:'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'At the end of this example the models'</l>
<l>Text[|Text|] := 'memory consumption is optimized for inference'</l>
<l>Text[|Text|] := '(for inference see part 4 of the example series).'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'To do so, we will set'</l>
<l>Text[|Text|] := '  \'batch_size\' := 1'</l>
<l>Text[|Text|] := 'and free the memory used for gradients by'</l>
<l>Text[|Text|] := '  \'optimize_for_inference\' := \'true\'.'</l>
<l>Text[|Text|] := ''</l>
<l>Text[|Text|] := 'Note that we will save the memory optimized model'</l>
<l>Text[|Text|] := 'over the read model.'</l>
<c>* </c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', 'box', 'true')</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_model_optimization_info">
<abstract lang="en_US">Mention that this example will save the model in a state optimized for inference.</abstract>
<parameters>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
<procedure name="dev_display_screen_device">
<interface>
<ic>
<par name="ExampleInternals" base_type="ctrl" dimension="0"/>
<par name="DLDevice" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This procedure displays information about the used device.</c>
<c></c>
<c>* Reset the open windows for a clean display.</c>
<l>set_dict_tuple (ExampleInternals, 'window_images_needed', false)</l>
<l>set_dict_tuple (ExampleInternals, 'window_legend_needed', false)</l>
<l>dev_display_example_reset_windows (ExampleInternals)</l>
<c></c>
<c>* Display the explanatory text.</c>
<l>get_dict_tuple (ExampleInternals, 'window_text', WindowHandleText)</l>
<l>dev_set_window (WindowHandleText)</l>
<c></c>
<l>get_dl_device_param (DLDevice, 'type', DLDeviceType)</l>
<l>get_dl_device_param (DLDevice, 'name', DLDeviceName)</l>
<c></c>
<l>Text := 'This example can be run on a GPU or CPU.'</l>
<l>Text[|Text|] := ''</l>
<l>if (DLDeviceType != 'gpu')</l>
<l>    Text[|Text|] := 'No GPU with necessary drivers and libraries has been found.'</l>
<l>    Text[|Text|] := ''</l>
<l>endif</l>
<l>Text[|Text|] := 'This example will run the deep learning operators'</l>
<l>Text[|Text|] := 'on the following device:'</l>
<l>Text[|Text|] := 'Device type: ' + DLDeviceType</l>
<l>Text[|Text|] := 'Device name: ' + DLDeviceName</l>
<c></c>
<l>dev_disp_text (Text, 'window', 'top', 'left', 'black', 'box', 'true')</l>
<l>dev_disp_text ('Press Run (F5) to continue', 'window', 'bottom', 'right', 'black', [], [])</l>
<c></c>
<l>return ()</l>
</body>
<docu id="dev_display_screen_device">
<abstract lang="en_US">Display a message to mention on which device the deep learning operators will run.</abstract>
<parameters>
<parameter id="DLDevice"/>
<parameter id="ExampleInternals"/>
</parameters>
</docu>
</procedure>
</hdevelop>
